{"version":3,"sources":["utils/API.js","components/Navbar/navbar.js","App.js","serviceWorker.js","index.js"],"names":["dotenv","config","Navbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","state","react_default","a","createElement","class","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Component","App","Navbar_navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ySAGAA,EAAOC,eAEQ,ICyCAC,cAxCX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAOVQ,kBAAoB,aALhBP,EAAKQ,MAAQ,GAHER,wEAaf,OACIS,EAAAC,EAAAC,cAAA,OAAKC,MAAM,iDACPH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,eAAeC,KAAK,KAA7B,UACAJ,EAAAC,EAAAC,cAAA,UAAQC,MAAM,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACpJV,EAAAC,EAAAC,cAAA,QAAMC,MAAM,yBAEhBH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,2BAA2BQ,GAAG,aACrCX,EAAAC,EAAAC,cAAA,MAAIC,MAAM,cACNH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,mBACNH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,QAAkCJ,EAAAC,EAAAC,cAAA,QAAMC,MAAM,WAAZ,eAEtCH,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YACNH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,aAEJJ,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YACNH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,WAAWC,KAAK,KAAzB,YAEJJ,EAAAC,EAAAC,cAAA,MAAIC,MAAM,YACNH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,oBAAoBC,KAAK,KAAlC,uBAjCPQ,aCuBNC,qBAnBb,SAAAA,EAAYvB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAmB,IACjBtB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAqB,GAAAhB,KAAAH,KAAMJ,KAORQ,kBAAoB,aALlBP,EAAKQ,MAAQ,GAHIR,wEAajB,OACES,EAAAC,EAAAC,cAACY,EAAD,aAhBYF,cCMEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrB,EAAAC,EAAAC,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1982fe19.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport dotenv from \"dotenv\";\r\n\r\ndotenv.config();\r\n\r\nexport default {\r\n\r\n    // BOOK ROUTES\r\n    // =============================================================\r\n\r\n    getAllBooks: function () {\r\n        return axios.get(\"/api/books/getAllBooks/\");\r\n    },\r\n\r\n    getSearchSuggestions: function (bookSearch) {\r\n        return axios.get(\"/api/books/getSearchSuggestions/\" + bookSearch);\r\n    },\r\n\r\n    searchForBook: function (userInput) {\r\n        return axios.get(\"/api/books/searchForBook/\" + userInput);\r\n    },\r\n\r\n    getAvailableBooks: function () {\r\n        return axios.get(\"/api/books/getAvailableBooks/\");\r\n    },\r\n\r\n    getUnavailableBooks: function () {\r\n        return axios.get(\"/api/books/getUnavailableBooks/\");\r\n    },\r\n\r\n    getFilteredAvailable: function(filter) {\r\n        return axios.get(\"/api/books/getFilteredAvailable/\" + filter);\r\n    },\r\n\r\n    getFilteredBooks: function(availFilter, formatFilter, subjectFilter) {\r\n        return axios.get(\"/api/books/getFilteredBooks\", { params: { availFilter: availFilter, formatFilter: formatFilter, subjectFilter: subjectFilter}});\r\n    },\r\n\r\n    getPaperbacks: function () {\r\n        return axios.get(\"/api/books/getPaperbacks/\");\r\n    },\r\n\r\n    getHardcovers: function () {\r\n        return axios.get(\"/api/books/getHardcovers/\");\r\n    },\r\n\r\n    getSubject: function (subject) {\r\n        return axios.get(\"/api/books/getSubject/\" + subject);\r\n    },\r\n\r\n    getBookByTitle: function (title) {\r\n        return axios.get(`https://www.googleapis.com/books/v1/volumes?q=${title}`);\r\n    },\r\n    \r\n    getBookSuggestions: function() {\r\n        return axios.get(\"/api/books/getBookSuggestions\");\r\n    },\r\n\r\n    // USER ROUTES\r\n    // =============================================================\r\n\r\n    loginUser: function (email, password) {\r\n        return axios.get(\"/api/users/loginUser/\", { params: { email: email, password: password }});\r\n    },\r\n\r\n    createNewUser: function (name, email, password) {\r\n        let user = {\r\n            name: name,\r\n            email: email,\r\n            password: password,\r\n        };\r\n\r\n        return axios.post(\"/api/users/createNewUser\", user);\r\n    },\r\n\r\n    updateCart: function (email, cart) {\r\n        return axios.put(\"/api/users/updateCart/\" + email, cart);\r\n    },\r\n\r\n    findExistingUser: function (email) {\r\n        return axios.get(\"/api/users/findExistingUser/\" + email);\r\n    },\r\n\r\n    submitNewPassword: function(email, password) {\r\n        return axios.put(\"/api/users/submitNewPassword\", { email: email, password: password });\r\n    },\r\n\r\n    // CART ROUTES\r\n    // =============================================================\r\n\r\n    checkBookAvail: function (book) {\r\n        return axios.get(\"/api/books/checkBookAvail/\" + book.title);\r\n    },\r\n\r\n    addToCart: function (book, email) {\r\n        return axios.put(\"/api/books/addToCart/\" + email, book);\r\n    },\r\n\r\n    deleteFromCart: function (book) {\r\n        return axios.put(\"/api/books/deleteFromCart\", book);\r\n    },\r\n\r\n    getBooksInCart: function(email) {\r\n        return axios.get(\"/api/books/getBooksInCart/\" + email);\r\n    },\r\n\r\n    // PAYPAL ROUTES\r\n    // =============================================================\r\n\r\n    payUsingPayPal: function (total) {\r\n        return axios.post(\"/api/payPal/payUsingPayPal/\" + total);\r\n    },\r\n\r\n    successfulPayment: function (paymentId, payerId, total) {\r\n        return axios.get(\"/api/payPal/successfulPayment\", { params: { paymentId: paymentId, payerId: payerId, total: total }});\r\n    },\r\n\r\n    cancelPayment: function () {\r\n        return axios.get(\"/api/payPal/cancelPayment\");\r\n    },\r\n\r\n    // ORDER ROUTES\r\n    // =============================================================\r\n\r\n    getUserBookOrders: function(email) {\r\n        return axios.get(\"/api/orders/getUserBookOrders/\" + email);\r\n    },\r\n\r\n    createBookOrder: function(order) {\r\n        return axios.post(\"/api/orders/createBookOrder\", order);\r\n    },\r\n\r\n    purchaseBook: function(book, email) {\r\n        return axios.put(\"/api/books/purchaseBook/\" + email, book);\r\n    },\r\n\r\n    saveOrderTotal: function(total) {\r\n        return axios.post(\"/api/orders/saveOrderTotal\", total);\r\n    },\r\n\r\n    // EMAIL ROUTES\r\n    // =============================================================\r\n\r\n    sendConfirmationEmail: function(orderInfo) {\r\n        return axios.post(\"/api/orders/sendConfirmationEmail\", orderInfo);\r\n    },\r\n\r\n    submitContactForm: function(userEmail, userMsg) {\r\n        let email = \"congobooksales@gmail.com\";\r\n        let subject = \"Message from Congo User\";\r\n        let message = \r\n        `User email: ${userEmail}\r\n        User message: ${userMsg}`;\r\n\r\n        return axios.post(\"/api/contact/submitContactForm\", { email: email, subject: subject, message: message });\r\n    },\r\n\r\n    sendCopyToUser: function(userEmail, userMsg) {\r\n        let email = userEmail;\r\n        let subject = \"Your message to Congo\";\r\n        let message = \r\n        `Hi there, \r\n        \r\n        Thanks for contacting Congo. We'll be in touch with you shortly. \r\n        \r\n        For now, here's a copy of your message: \r\n        \r\n        ${userMsg}\r\n\r\n        Sincerely, \r\n\r\n        Congo`;\r\n\r\n        return axios.post(\"/api/contact/submitContactForm\", { email: email, subject: subject, message: message });\r\n    },\r\n\r\n    // PASSWORD RESET ROUTES\r\n    // =============================================================\r\n\r\n    setResetCode: function(email) {\r\n        let resetCode = Math.floor(100000 + Math.random() * 900000).toString();\r\n        return axios.post(\"/api/reset/setResetCode\", { email: email, resetCode: resetCode });\r\n    },\r\n\r\n    sendPasswordResetCode: function(email, resetCode) {\r\n        return axios.post(\"/api/reset/sendPasswordResetCode\", { email: email, resetCode: resetCode });\r\n    },\r\n\r\n    submitResetCode: function(email, resetCode) {\r\n        return axios.get(\"/api/reset/submitResetCode/\", { params: { email: email, resetCode: resetCode }});\r\n    },\r\n\r\n    clearResetCode: function(email) {\r\n        return axios.delete(\"/api/reset/clearResetCode/\" + email);\r\n    },\r\n};\r\n","import React, { Component } from \"react\";\r\nimport API from \"../../utils/API\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a class=\"navbar-brand\" href=\"#\">Navbar</a>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul class=\"navbar-nav\">\r\n                        <li class=\"nav-item active\">\r\n                            <a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"#\">Features</a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\" href=\"#\">Pricing</a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link disabled\" href=\"#\">Disabled</a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from \"react-router-dom\";\nimport Navbar from \"./components/Navbar/navbar\";\nimport API from \"./utils/API\";\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n    }\n  }\n\n  componentDidMount = () => {\n\n  }\n\n  render() {\n    return (\n      <Navbar />\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}